// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, unnecessary_cast, override_on_non_overriding_member
// ignore_for_file: strict_raw_type, inference_failure_on_untyped_parameter

part of 'animal_test.dart';

class AnimalMapper extends ClassMapperBase<Animal> {
  AnimalMapper._();

  static AnimalMapper? _instance;
  static AnimalMapper ensureInitialized() {
    if (_instance == null) {
      MapperContainer.globals.use(_instance = AnimalMapper._());
    }
    return _instance!;
  }

  @override
  final String id = 'Animal';

  static String _$name(Animal v) => v.name;
  static const Field<Animal, String> _f$name = Field('name', _$name);
  static String _$species(Animal v) => v.species;
  static const Field<Animal, String> _f$species = Field('species', _$species);
  static int _$age(Animal v) => v.age;
  static const Field<Animal, int> _f$age = Field('age', _$age);

  @override
  final MappableFields<Animal> fields = const {
    #name: _f$name,
    #species: _f$species,
    #age: _f$age,
  };

  static Animal _instantiate(DecodingData data) {
    return Animal(
        name: data.dec(_f$name),
        species: data.dec(_f$species),
        age: data.dec(_f$age));
  }

  @override
  final Function instantiate = _instantiate;

  static Animal fromMap( map) {
    return ensureInitialized().decodeMap<Animal>(map);
  }

  static Animal fromJson(String json) {
    return ensureInitialized().decodeJson<Animal>(json);
  }
}

mixin AnimalMappable {
  String toJson() {
    return AnimalMapper.ensureInitialized().encodeJson<Animal>(this as Animal);
  }

  Map<String, dynamic> toMap() {
    return AnimalMapper.ensureInitialized().encodeMap<Animal>(this as Animal);
  }

  AnimalCopyWith<Animal, Animal, Animal> get copyWith =>
      _AnimalCopyWithImpl(this as Animal, $identity, $identity);
  @override
  String toString() {
    return AnimalMapper.ensureInitialized().stringifyValue(this as Animal);
  }

  @override
  bool operator ==(Object other) {
    return AnimalMapper.ensureInitialized().equalsValue(this as Animal, other);
  }

  @override
  int get hashCode {
    return AnimalMapper.ensureInitialized().hashValue(this as Animal);
  }
}

extension AnimalValueCopy<$R, $Out> on ObjectCopyWith<$R, Animal, $Out> {
  AnimalCopyWith<$R, Animal, $Out> get $asAnimal =>
      $base.as((v, t, t2) => _AnimalCopyWithImpl(v, t, t2));
}

abstract class AnimalCopyWith<$R, $In extends Animal, $Out>
    implements ClassCopyWith<$R, $In, $Out> {
  $R call({String? name, String? species, int? age});
  AnimalCopyWith<$R2, $In, $Out2> $chain<$R2, $Out2>(Then<$Out2, $R2> t);
}

class _AnimalCopyWithImpl<$R, $Out> extends ClassCopyWithBase<$R, Animal, $Out>
    implements AnimalCopyWith<$R, Animal, $Out> {
  _AnimalCopyWithImpl(super.value, super.then, super.then2);

  @override
  late final ClassMapperBase<Animal> $mapper = AnimalMapper.ensureInitialized();
  @override
  $R call({String? name, String? species, int? age}) =>
      $apply(FieldCopyWithData({
        if (name != null) #name: name,
        if (species != null) #species: species,
        if (age != null) #age: age
      }));
  @override
  Animal $make(CopyWithData data) => Animal(
      name: data.get(#name, or: $value.name),
      species: data.get(#species, or: $value.species),
      age: data.get(#age, or: $value.age));

  @override
  AnimalCopyWith<$R2, Animal, $Out2> $chain<$R2, $Out2>(Then<$Out2, $R2> t) =>
      _AnimalCopyWithImpl($value, $cast, t);
}
